然后修改 AutoUpdateService 中的代码，如下所示：

public class AutoUpdateService extends Service {
    public AutoUpdateService() {
    }
    @Override
    public IBinder onBind(Intent intent) {
        // TODO: Return the communication channel to the service.
        return null;
    }
    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        updateWeather();    // 更新天气
        updateBingPic();    // 更新背景图片
        //定时任务
        AlarmManager manager = (AlarmManager)getSystemService(ALARM_SERVICE);
        int anHour = 60 * 60 * 1000; // 1 小时
        long triggerAtTime = SystemClock.elapsedRealtime() + anHour;    // 设置触发时间
        Intent i = new Intent(this,AutoUpdateService.class);
        PendingIntent pi = PendingIntent.getService(this,0,i,0);
        manager.cancel(pi);
        manager.set(AlarmManager.ELAPSED_REALTIME_WAKEUP,triggerAtTime,pi);
        return super.onStartCommand(intent,flags,startId);
    }
    /**
     * 更新天气信息
     */
    private void updateWeather(){
        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(this);
        String weatherString = prefs.getString("weather",null);
        if(weatherString != null){
            //有缓存时直接解析天气数据
            Weather weather = Utility.handleWeatherResponse(weatherString);
            String weatherId = weather.basic.weatherId;
            String weatherUrl = "http://guolin.tech/api/weather?cityid=" + weatherId
                    + "&key=6ebfd087db8144cbaab3884bb8f4b19d";  // 注意此处替换为之前申请的 API Key
            HttpUtil.sendOkHttpRequest(weatherUrl, new Callback() {
                @Override
                public void onFailure(@NotNull Call call, @NotNull IOException e) {
                    e.printStackTrace();
                }
                @Override
                public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                    final String responseText = response.body().string();
                    final Weather weather = Utility.handleWeatherResponse(responseText);
                    if (weather != null && "ok".equals(weather.status)) {
                        //缓存有效的weather对象(实际上缓存的是字符串)
                        SharedPreferences.Editor editor = PreferenceManager
                                .getDefaultSharedPreferences(AutoUpdateService.this).edit();
                        editor.putString("weather", responseText);
                        editor.apply();
                    }
                }
            });
        }
    }
    /**
     * 更行必应每日一图
     */
    private void updateBingPic(){
        String requestBingPic="http://guolin.tech/api/bing_pic";
        HttpUtil.sendOkHttpRequest(requestBingPic, new Callback() {
            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                e.printStackTrace();
            }
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                String bingPic = response.body().string();
                SharedPreferences.Editor editor = PreferenceManager.getDefaultSharedPreferences(AutoUpdateService.this).edit();
                editor.putString("bing_pic",bingPic);
                editor.apply();
            }
        });
    }
}
以上代码中先在 onStartCommand()方法中调用 updateWeather()方法来更新天气，然后调用 updateBigPic()方法更新背景图片。这里将更新后的数据直接存储到 SharedPreferences 文件。之后就设置了一个定时任务，每小时执行一次 AutoUpdateService 的 onStartCommand()方法。

激活定时服务
设置了定时服务之后，还需要激活它。修改 WeatherActivity 中的代码，如下所示：

public class WeatherActivity extends AppCompatActivity {
    ...
    /**
     * 处理并展示Weather实体类中的数据
     */
    private void showWeatherInfo(Weather weather){
        ...
        Intent intent = new Intent(this, AutoUpdateService.class);
        startService(intent);
    }
    ...
}
以上代码在 showWeatherInfo()方法的最后加入了启动 AutoUpdateService 这个服务的代码，这样只要选中了某个城市并成功更新天气之后， AutoUpdateService 就会一直在后台运行，每小时更新一次天气。

实训要求
根据提示，在右侧编辑器补充代码，完成自动更新天气的功能。

测试说明
平台会对你的操作进行自动测试，符合要求即为通过。

开始你的任务吧，祝你成功！
